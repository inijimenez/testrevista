var webpublicationActionEventName = 'WebPublicationAction';var resolvedNamespace = null;var isPublication = false;if (window.webpublicationNamespace) {	isPublication = true;	resolvedNamespace = window.webpublicationNamespace;} else if (window.parent.webpublicationNamespace) {	resolvedNamespace = window.parent.webpublicationNamespace;	window.webpublicationNamespace = resolvedNamespace;}if (window !== window.parent) {	// polyfill to create customEvents from a component inside a publication	(function () {		if (typeof window.CustomEvent === 'function') return false;		function CustomEvent(event, params) {			params = params || {				bubbles: false,				cancelable: false,				detail: undefined			};			var evt = document.createEvent('CustomEvent');			evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);			return evt;		}		CustomEvent.prototype = window.Event.prototype;		window.CustomEvent = CustomEvent;	})();	// if we are in a component inside a publication, dispatch event to the publication	document.addEventListener(webpublicationActionEventName, function (event) {		window.parent.document.dispatchEvent(new CustomEvent(webpublicationActionEventName, event));	});}if (resolvedNamespace !== null) {	(function(ns) {		var request = new XMLHttpRequest();		var configPublicationPath = 'publication/contents/media-epub/script/configs.json';		var configComponentPath = 'script/configs.json';		var configsJsonPath = isPublication ? configPublicationPath : configComponentPath;		request.open('GET', configsJsonPath, false);		request.onreadystatechange = function () {			if (request.readyState === 4) {				if (request.status === 200 || request.status == 0) {					var configText = request.responseText;					var config = JSON.parse(configText);					var exportsNs = ns.inddEpubDataExported || {};					exportsNs.config = exportsNs.config || config;					ns.inddEpubDataExported = exportsNs;				}			}		}		request.send(null);	})(webpublicationNamespace || {});}